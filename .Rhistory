View(data2)
data2 <- dtGDP[X != ""]
data2 <- data2[X != ""]
View(data2)
data2 <- data2[, list(X, X.1, X.3, X.4)]
View(data2)
setnames(data2, c("X", "X.1", "X.3", "X.4"), c("code", "ranking",
"name", "gdp"))
data2$gpd
View(data2)
data2$gpd
class(data2)
data2$gpd
gsub(",", "", data2$gdp)
as.numeric(gsub(",", "", data2$gdp))
as.numeric(gsub(",", ".", data2$gdp))
sum(as.numeric(gsub(",", ".", data2$gdp)))
sum(as.numeric(gsub(",", "", data2$gdp)))
gdp <- as.numeric(gsub(",", ".", data2$gdp))
mean(gdp, na.rm = TRUE)
fileurl2 = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
dst2 = 'q42.csv'
download.file(fileurl2, dst2, method = 'auto')
data2 = data.table(read.csv(dst2, skip = 4, nrows = 215, stringsAsFactors = FALSE))
data2 <- data2[X != ""]
data2 <- data2[, list(X, X.1, X.3, X.4)]
setnames(data2, c("X", "X.1", "X.3", "X.4"), c("code", "ranking",
"name", "gdp"))
gdp <- as.numeric(gsub(",", "", data2$gdp))
mean(gdp, na.rm = TRUE)
gpd
gdp
!is.na(gdp)
count(data2$name,^United)
countries<-data2$name
^literals
?grep
grep(^United,data2$name)
grep("^United",data2$name)
count(grep("^United",data2$name))
count.fields(grep("^United",data2$name))
length(grep("^United",data2$name))
data2$name
grep("^United",data2$name)
data2$name[c(1,6,32)]
grep("^United",data2$name), 4
grep("^United",data2$name)
url4 = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
dst4 = 'q44.csv'
download.file(url4, dst4, method = 'auto')
data4<-read.csv(dst4)
View(data4)
dt <- merge(data2, data4, all = TRUE, by = c("code","CountryCode"))
data4<-data.table(read.csv(dst4))
dt <- merge(data2, data4, all = TRUE, by = c("code","CountryCode"))
names(data2)
names(data4)
names(data2[1])
names(data2[[1]])
names(data2)[1]
names(data2)[1]<-"CountryCode"
dt <- merge(data2, data4, all = TRUE, by = c("CountryCode"))
dt
?contains
grep(["fiscal year end"."June"],tolower(dt$Special.Notes))
grep("[fiscal year end.June]",tolower(dt$Special.Notes))
dt[3]$Special.Notes
grep("[fiscal year end].[June]",tolower(dt$Special.Notes))
dt[3]$Special.Notes
grep("fiscal year end*June",tolower(dt$Special.Notes))
grep("fiscal year end?June",tolower(dt$Special.Notes))
grep("fiscal year end(*)?June",tolower(dt$Special.Notes))
grep("fiscal year end(.*)?June",tolower(dt$Special.Notes))
grep("[fiscal year end](.*)[June]",tolower(dt$Special.Notes))
dt[10]$Special.Notes
length(grep("[fiscal year end](.*)[June]",tolower(dt$Special.Notes)))
length(grep("fiscal year end(.*)June",tolower(dt$Special.Notes)))
length(grep("[fiscal year end]+(.*)[June]+",tolower(dt$Special.Notes)))
length(grep("fiscal year end(.*)June",tolower(dt$Special.Notes)))
grep("fiscal year end(.*)June",tolower(dt$Special.Notes))
grepl("fiscal year end(.*)June",tolower(dt$Special.Notes))
grepl("fiscal year end(*)June",tolower(dt$Special.Notes))
grep("fiscal year end(.*)June",tolower(dt$Special.Notes))
grep("fiscal year end(.*)June", "Fiscal year end: June 30")
grep("fiscal year end(.*)june",tolower(dt$Special.Notes))
length(grep("fiscal year end(.*)june",tolower(dt$Special.Notes)))
length(grep("fiscal year end(.*)june",tolower(dt$Special.Notes)))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
amzn
names(amzn)
View(amzn)
sampleTimes = index(amzn)
sampleTimes
detach("package:data.table", unload=TRUE)
library(lubridate)
year(sampleTimes)
length(year(sampleTime)==2012)
length(year(sampleTimes)==2012)
year(sampleTimes)==2012
count(year(sampleTimes)==2012)
length(year(sampleTimes)=2012)
is.true(year(sampleTimes)==2012)
(year(sampleTimes)==2012)==TRUE
sampleTimes[year(sampleTimes)==2012)]
sampleTimes[year(sampleTimes)==2012),]
sampleTimes[(year(sampleTimes)==2012))]
sampleTimes[(year(sampleTimes)==2012)]
sampleTimes[(year(sampleTimes)==2012)].count()
count.sampleTimes[(year(sampleTimes)==2012)]
class(sampleTimes)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
?addmargins
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
lines
?fwread
? read.fwf
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
wth<-c(-1,9,-5,4,-1,3,-5,4,-1,3,-5,4,-1,3,-5,4,-1,3)
colNames<-c("Week","col1","col2","col3","col4","col5","col6","col7","col8")
d <- read.fwf(url, wth, header=FALSE, skip=4, col.names=colNames)
head(lines)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
ppm<-pollution$pm25
quantile(ppm)
boxplot(ppm,col="blue")
abline(ppm,h=12)
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
hight
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
reg<-pollution$region
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution,region=="east")
head(east)
hist(east$pm25,col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
with(pollution,plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,ppm,col="pollution$region")
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west<-subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="East")
?Devices
with(faithful,plot(eruptions,waiting))
with(faithful,plot(eruptions,waiting,main="Old Faithful Geyser data"))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting,main="Old Faithful Geyser data"))
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot( Life.Exp ~ Income | region,data=state,layout=c(4,1))
xyplot( Life.Exp ~ Income | region,data=state,layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
gplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
boxplot(table(airquality$Month))
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
dev.off()
title(main="Ozone and Wind in New York City")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind, Oxone))
with(airquality,plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
par(length)
length(par())
names(par())
?par
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,set="n")
plot(airquality$Wind,airquality$Ozone,type="n")
title(main="Wind and Ozone in NYC")
may<-subset(airquality,Month==5)
points(may$Wind,may$Ozone,col="blue",pch=3)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<-subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(h=mean(airquality$Wind),lty=2.lwd=2)
abline(h=mean(airquality$Wind),lty=2.lwy=2)
abline(h=mean(airquality$Wind),lty=2,lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Win,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3,mar=c(4, 4, 2, 1), oma =c(0, 0, 2, 0)))
par(mfrow=c(1,3),mar=c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,main= "Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
swirl()
exit
quit
logout
exit
quit
getwd()
setwd("C:/Users/Isabel/gitrepos/ExData_Plotting1")
source('C:/Users/Isabel/gitrepos/ExData_Plotting1/plot4.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Plotting1/plot4.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Plotting1/plot1.R', echo=TRUE)
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=.4,col="red")
5
abline(h=.05,col="red")
12
abline(h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,pch=8,cex=2,col=cols1)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,wich.min)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col= kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R" )
source("addPatt.R",equal=TRUE)
source("addPatt.R",loca=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag  %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2[,1-2]
svd2[,2]
svd2[,1:2]
svd2$v[,1:2]
svd2$d
dim(faceData    )
a1<-(svd1$u[,1]*svd1$d[1])%*%t(svd1$v[1])
a1<-(svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1])
myImage(a1)
a2<-svd1$u[,1:2]%*%svd1$d[1:2])%*%t(svd1$v[,1:2])
a2<-svd1$u[,1:2]%*%svd1$d[1:2]%*%t(svd1$v[,1:2])
a2<-svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
image(a2)
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
)
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10])
)
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject)))
sum(table(ssd$subject))
table(ssd$activity)
sub1<-subset(ssd,subject==1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist(sub1[,1:3])
dist(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon<-which.max(svd1$v)
maxCon<-which.max(which.max(svd1$v[,2]))
maxCon <- which.max(svd1$v[,2])
mdist<-dist(concat(sub1[,10:12],maxCon))
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col= unclass(sub1$activity))
names(sub1[maxCon])
kClust<-kmeans((sub1[, -c(562, 563)],centers=6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6,nstart=100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying<-which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
?%in%
??%in%
quit
?%in%
swirl()
dim(pm0)
head(pm0)
cnames
cnames<-strsplit(cnames,'|',na.rm=TRUE)
cnames<-strsplit(cnames,'|',fixed=TRUE)
cnames
names(pm0)<-make.names(cnames[[1]][wcol])
head(pm0)
x0<-pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1)<-make.names(cnames[[1]][wcol])
dim(pm1)
x1<-pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative<-x1<0
sum(negative,na.rm=TRUE)
mean(sum(negative,na.rm=TRUE))
mean(negative, na.rm = TRUE)
dates<-pm1$Date
str(dates)
dates<-as.character(dates,"%Y%m%d")
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates,"month")
hist(dates[negative],"month")
str(site0)
both<-intersect(site0,site1)
both
head(pm0)
cnt0<-subset(pm0,state.Code==36&county.site %in% both)
cnt0<-subset(pm0,County.Code==36&county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub<-subset(cnt0,County.Code==63&Site.ID==2008)
pm1sub<-subset(cnt1,County.Code==63&Site.ID==2008)
x0sub<-pm0sub$Sample.Value
x1sub<-pm1sub$Sample.Value
dates0<-as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1<-as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2))
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(h=median(x0sub,na.rm=T),lwd=2)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates,x1sub,pch=20)
plot(dates1,x1sub,pch=20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng<-range(x0sub,x1sub,na.rm=TRUE)
rng
mn0<-(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
mn0<-with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1<-with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0<-data.frame(state=names(mn0),mean(mn0))
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg<-merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y, ]
logout
exit
logoff
exit
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
setwd("C:/Users/Isabel/gitrepos/ExData_Project2")
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
dev.off()
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
dev.off()
dev.off()
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
dev.off()
dev.off()
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
dev.off()
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
dev.off()
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
dev.off()
dev.off()
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
dev.off()
dev.off()
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
dev.off()
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
g<-ggplot(data=Total, aes(x=year, y=Emissions))
g
+ geom_bar(aes(fill=year))
g<-ggplot(data=Total, aes(x=factor(year), y=Emissions))
g
+ geom_bar(aes(fill=year))
class(Total)
dev.off()
dev.off()
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
dev.off()
dev.off()
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
which.max(TotalB$Emissions)-which.min(TotalB$Emissions)
TotalB
which.max(TotalB$Emissions)
which.max(TotalB$Emissions)
max(TotalB$Emissions)
max(TotalB$Emissions)-min(TotalB$Emissions)
TotalLA
3931.120-4101.321
4101.321-88.27
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
dev.off()
dev.off()
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
dev.off()
source('C:/Users/Isabel/gitrepos/ExData_Project2/plot6.R', echo=TRUE)
